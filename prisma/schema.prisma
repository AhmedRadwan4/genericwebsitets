datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  brand         String?
  size          String?
  fit           String?
  images        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?      @db.ObjectId
  SubCategory   SubCategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?      @db.ObjectId
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  products    Product[]
  name        String
  SubCategory SubCategory[]
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
  Products   Product[]
}
