datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  brand         String?
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  categoryId    String       @db.ObjectId
  subCategoryId String       @db.ObjectId
  category      Category     @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory  @relation(fields: [subCategoryId], references: [id])
  subProducts   SubProduct[]
}

model SubProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sku       String?
  price     Int?
  stock     Int?
  discount  Int?     @default(0)
  sold      Int?     @default(0)
  images    String[]
  colorId   String?  @db.ObjectId
  sizeId    String?  @db.ObjectId
  productId String   @db.ObjectId
  color     Color?   @relation(fields: [colorId], references: [id])
  size      Size?    @relation(fields: [sizeId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Color {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  color       String?
  subProducts SubProduct[]
}

model Size {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  size        String
  subProducts SubProduct[]
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  products      Product[]
  subCategories SubCategory[]
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])
  products   Product[]
}
